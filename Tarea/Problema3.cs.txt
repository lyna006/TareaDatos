public class Problema3 : IList
{
    public Node Head { get; private set; }
    public Node Tail { get; private set; }
    private int Count { get; set; }
    private Node Middle { get; set; }

    public void InsertInOrder(int value)
    {
        var newNode = new Node(value);
        if (Head == null)
        {
            // La lista está vacía
            Head = Tail = newNode;
            Middle = newNode;
        }
        else
        {
            var current = Head;
            while (current != null && current.Value < value)
            {
                current = current.Next;
            }

            if (current == null)
            {
                // Insertar al final
                Tail.Next = newNode;
                newNode.Previous = Tail;
                Tail = newNode;
            }
            else if (current == Head)
            {
                // Insertar al principio
                newNode.Next = Head;
                Head.Previous = newNode;
                Head = newNode;
            }
            else
            {
                // Insertar en el medio
                newNode.Previous = current.Previous;
                newNode.Next = current;
                current.Previous.Next = newNode;
                current.Previous = newNode;
            }

            Count++;
            UpdateMiddle();
        }
    }

    public int DeleteFirst()
    {
        if (Head == null)
        {
            throw new InvalidOperationException("List is empty.");
        }

        int value = Head.Value;

        Head = Head.Next;

        if (Head != null)
        {
            Head.Previous = null;
        }
        else
        {
            Tail = null;
        }

        Count--;
        UpdateMiddle();
        return value;
    }

    public int DeleteLast()
    {
        if (Tail == null)
        {
            throw new InvalidOperationException("List is empty.");
        }

        int value = Tail.Value;

        Tail = Tail.Previous;

        if (Tail != null)
        {
            Tail.Next = null;
        }
        else
        {
            Head = null;
        }

        Count--;
        UpdateMiddle();
        return value;
    }

    public bool DeleteValue(int value)
    {
        var current = Head;
        while (current != null)
        {
            if (current.Value == value)
            {
                if (current.Previous != null)
                {
                    current.Previous.Next = current.Next;
                }
                else
                {
                    Head = current.Next;
                }

                if (current.Next != null)
                {
                    current.Next.Previous = current.Previous;
                }
                else
                {
                    Tail = current.Previous;
                }

                Count--;
                UpdateMiddle();
                return true;
            }
            current = current.Next;
        }

        return false; // Nodo no encontrado
    }

    public int GetMiddle()
    {
        if (Middle == null)
        {
            throw new InvalidOperationException("List is empty.");
        }
        return Middle.Value;
    }

    private void UpdateMiddle()
    {
        if (Count == 0)
        {
            Middle = null;
            return;
        }

        // Encuentra el nuevo nodo central
        var midIndex = Count / 2;
        var current = Head;
        for (int i = 0; i < midIndex; i++)
        {
            current = current.Next;
        }
        Middle = current;
    }
}

