uusing Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class ListTests
{
    [TestMethod]
    public void TestMergeSortedLists()
    {
        var listA = new Problema1();
        var listB = new Problema1();

        // Insertar datos en listA
        listA.InsertInOrder(0);
        listA.InsertInOrder(2);
        listA.InsertInOrder(6);
        listA.InsertInOrder(10);
        listA.InsertInOrder(25);

        // Insertar datos en listB
        listB.InsertInOrder(3);
        listB.InsertInOrder(7);
        listB.InsertInOrder(11);
        listB.InsertInOrder(40);
        listB.InsertInOrder(50);

        // Mezclar en orden ascendente
        listA.MergeSortedLists(listA, listB, SortDirection.Asc);

        // Verificar el resultado
        var current = listA.Head;
        int[] expectedValues = { 0, 2, 3, 6, 7, 10, 11, 25, 40, 50 };
        foreach (var expected in expectedValues)
        {
            Assert.IsNotNull(current);
            Assert.AreEqual(expected, current.Value);
            current = current.Next;
        }
        Assert.IsNull(current); // Asegúrate de que no haya más nodos
    }

    [TestMethod]
    public void TestInvert()
    {
        var list = new Problema2();

        // Insertar datos en list
        list.InsertInOrder(1);
        list.InsertInOrder(0);
        list.InsertInOrder(30);
        list.InsertInOrder(50);
        list.InsertInOrder(2);

        // Invertir la lista
        list.Invert();

        // Verificar el resultado
        var current = list.Head;
        int[] expectedValues = { 2, 50, 30, 0, 1 };
        foreach (var expected in expectedValues)
        {
            Assert.IsNotNull(current);
            Assert.AreEqual(expected, current.Value);
            current = current.Next;
        }
        Assert.IsNull(current); // Asegúrate de que no haya más nodos
    }

    [TestMethod]
    public void TestGetMiddle()
    {
        var list = new Problema3();

        // Insertar datos en list
        list.InsertInOrder(1);
        list.InsertInOrder(2);
        list.InsertInOrder(0);

        // Verificar el valor del nodo central
        Assert.AreEqual(2, list.GetMiddle());

        // Insertar más datos
        list.InsertInOrder(3);

        // Verificar el valor del nodo central actualizado
        Assert.AreEqual(2, list.GetMiddle());
    }
}
